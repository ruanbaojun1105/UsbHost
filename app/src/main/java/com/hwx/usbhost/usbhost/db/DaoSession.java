package com.hwx.usbhost.usbhost.db;

import java.util.Map;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.AbstractDaoSession;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.identityscope.IdentityScopeType;
import org.greenrobot.greendao.internal.DaoConfig;

import com.hwx.usbhost.usbhost.db.Accessories;
import com.hwx.usbhost.usbhost.db.AccessoriesMore;
import com.hwx.usbhost.usbhost.db.Cocktail;
import com.hwx.usbhost.usbhost.db.CocktailFormula;
import com.hwx.usbhost.usbhost.db.Glass;
import com.hwx.usbhost.usbhost.db.Ornament;
import com.hwx.usbhost.usbhost.db.OrnamentMore;
import com.hwx.usbhost.usbhost.db.User;

import com.hwx.usbhost.usbhost.db.AccessoriesDao;
import com.hwx.usbhost.usbhost.db.AccessoriesMoreDao;
import com.hwx.usbhost.usbhost.db.CocktailDao;
import com.hwx.usbhost.usbhost.db.CocktailFormulaDao;
import com.hwx.usbhost.usbhost.db.GlassDao;
import com.hwx.usbhost.usbhost.db.OrnamentDao;
import com.hwx.usbhost.usbhost.db.OrnamentMoreDao;
import com.hwx.usbhost.usbhost.db.UserDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 * 
 * @see org.greenrobot.greendao.AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig accessoriesDaoConfig;
    private final DaoConfig accessoriesMoreDaoConfig;
    private final DaoConfig cocktailDaoConfig;
    private final DaoConfig cocktailFormulaDaoConfig;
    private final DaoConfig glassDaoConfig;
    private final DaoConfig ornamentDaoConfig;
    private final DaoConfig ornamentMoreDaoConfig;
    private final DaoConfig userDaoConfig;

    private final AccessoriesDao accessoriesDao;
    private final AccessoriesMoreDao accessoriesMoreDao;
    private final CocktailDao cocktailDao;
    private final CocktailFormulaDao cocktailFormulaDao;
    private final GlassDao glassDao;
    private final OrnamentDao ornamentDao;
    private final OrnamentMoreDao ornamentMoreDao;
    private final UserDao userDao;

    public DaoSession(Database db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        accessoriesDaoConfig = daoConfigMap.get(AccessoriesDao.class).clone();
        accessoriesDaoConfig.initIdentityScope(type);

        accessoriesMoreDaoConfig = daoConfigMap.get(AccessoriesMoreDao.class).clone();
        accessoriesMoreDaoConfig.initIdentityScope(type);

        cocktailDaoConfig = daoConfigMap.get(CocktailDao.class).clone();
        cocktailDaoConfig.initIdentityScope(type);

        cocktailFormulaDaoConfig = daoConfigMap.get(CocktailFormulaDao.class).clone();
        cocktailFormulaDaoConfig.initIdentityScope(type);

        glassDaoConfig = daoConfigMap.get(GlassDao.class).clone();
        glassDaoConfig.initIdentityScope(type);

        ornamentDaoConfig = daoConfigMap.get(OrnamentDao.class).clone();
        ornamentDaoConfig.initIdentityScope(type);

        ornamentMoreDaoConfig = daoConfigMap.get(OrnamentMoreDao.class).clone();
        ornamentMoreDaoConfig.initIdentityScope(type);

        userDaoConfig = daoConfigMap.get(UserDao.class).clone();
        userDaoConfig.initIdentityScope(type);

        accessoriesDao = new AccessoriesDao(accessoriesDaoConfig, this);
        accessoriesMoreDao = new AccessoriesMoreDao(accessoriesMoreDaoConfig, this);
        cocktailDao = new CocktailDao(cocktailDaoConfig, this);
        cocktailFormulaDao = new CocktailFormulaDao(cocktailFormulaDaoConfig, this);
        glassDao = new GlassDao(glassDaoConfig, this);
        ornamentDao = new OrnamentDao(ornamentDaoConfig, this);
        ornamentMoreDao = new OrnamentMoreDao(ornamentMoreDaoConfig, this);
        userDao = new UserDao(userDaoConfig, this);

        registerDao(Accessories.class, accessoriesDao);
        registerDao(AccessoriesMore.class, accessoriesMoreDao);
        registerDao(Cocktail.class, cocktailDao);
        registerDao(CocktailFormula.class, cocktailFormulaDao);
        registerDao(Glass.class, glassDao);
        registerDao(Ornament.class, ornamentDao);
        registerDao(OrnamentMore.class, ornamentMoreDao);
        registerDao(User.class, userDao);
    }
    
    public void clear() {
        accessoriesDaoConfig.clearIdentityScope();
        accessoriesMoreDaoConfig.clearIdentityScope();
        cocktailDaoConfig.clearIdentityScope();
        cocktailFormulaDaoConfig.clearIdentityScope();
        glassDaoConfig.clearIdentityScope();
        ornamentDaoConfig.clearIdentityScope();
        ornamentMoreDaoConfig.clearIdentityScope();
        userDaoConfig.clearIdentityScope();
    }

    public AccessoriesDao getAccessoriesDao() {
        return accessoriesDao;
    }

    public AccessoriesMoreDao getAccessoriesMoreDao() {
        return accessoriesMoreDao;
    }

    public CocktailDao getCocktailDao() {
        return cocktailDao;
    }

    public CocktailFormulaDao getCocktailFormulaDao() {
        return cocktailFormulaDao;
    }

    public GlassDao getGlassDao() {
        return glassDao;
    }

    public OrnamentDao getOrnamentDao() {
        return ornamentDao;
    }

    public OrnamentMoreDao getOrnamentMoreDao() {
        return ornamentMoreDao;
    }

    public UserDao getUserDao() {
        return userDao;
    }

}
